
import {
  isPrime,
  modulo,
  modulo2,
  primeFactors,
  tt,
} from '../utility';



import { LoggerType } from '../types/logger.type';
import { logger } from './logger';



/**
 * –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –ª–µ–∂–∞–Ω–¥—Ä–∞ (a/p)
 */
export class LegendreSymbol {

  // logger
  logger: LoggerType = logger;
  //
  public a: number = 0;
  //
  public p: number = 0;

  // -1 | 0 | 1 
  symbol: number = 0;

  // https://www.mymathtables.com/numbers/legendre-symbol-generator.html
  constructor(a?: number, p?: number) {
    if (typeof a === 'number') {
      this.a = a;
    }
    if (typeof p === 'number') {
      this.p = p;
    }
  }



  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –õ–µ–∂–∞–Ω–¥—Ä–∞
   * 
   * @returns 
   */
  calc(a?: number, p?: number): number {

    a = a ?? this.a;
    p = p ?? this.p;

    this.logger.log(`‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ ‚ñΩ `, 'color:gray');
    this.logger.log(`–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –õ–µ–∂–∞–Ω–¥—Ä–∞.`);
    this.logger.log(`a=${a}, p=${p}`);
    this.logger.log(` `);
    this.logger.log(`- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -`, 'color:gray');
    this.logger.log(`x¬≤ ‚â° a (mod p), p>1, a ‚àà {1, 2, p-1}`, 'color:gray');
    this.logger.log(`  –∏–ª–∏ –≤ –≤–∏–¥–µ —Å–∏–º–≤–æ–ª–∞ –õ–µ–∂–∞–Ω–¥—Ä–∞`, 'color:gray');
    this.logger.log(`–°—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: `, 'color:gray');
    this.logger.log(`(a/p) = +1 ‚Üê –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π –≤—ã—á–µ—Ç`, 'color:gray');
    this.logger.log(`(a/p) = -1 ‚Üê –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π –Ω–µ–≤—ã—á–µ—Ç`, 'color:gray');
    this.logger.log(` `);
    // https://mathcenter.oxford.emory.edu/site/math125/legendresSymbolProperties/
    this.logger.log(`–°–≤–æ–π—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–∞ –õ–µ–∂–∞–Ω–¥—Ä–∞`, 'color:gray');
    this.logger.log(`1. (a¬≤/p) = 1`, 'color:gray');
    this.logger.log(`2. (-1/p) = p mod 4`, 'color:gray');
    this.logger.log(`3. (2/p) = { 1, –µ—Å–ª–∏ p ‚â° ¬±1 mod 8}`, 'color:gray');
    this.logger.log(`   (2/p)   {-1, –µ—Å–ª–∏ p ‚â° ¬±3 mod 8}`, 'color:gray');
    this.logger.log(`4. (a/p) = ( (a‚ÇÅ * a‚ÇÇ * a‚ÇÉ ... * a‚Çñ)/p ) = (a‚ÇÅ/p)(a‚ÇÇ/p)(a‚ÇÉ/p) ... (a‚Çñ/p)`, 'color:gray');
    this.logger.log(`5. a ‚â° b (mod p), (a / p) = (b / p)`, 'color:gray');
    this.logger.log(`–ö—Ä–∏—Ç–µ—Ä–∏–π –≠–π–ª–µ—Ä–∞: (a/p) = a^((p-1)/2) mod p`, 'color:gray');
    this.logger.log(`–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π –∑–∞–∫–æ–Ω –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏:`, 'color:gray');
    this.logger.log(`   (p/q)(q/p) = { 1, –µ—Å–ª–∏ p ‚â° ¬±1 mod 4 –ª–∏–±–æ q ‚â° 1 mod 4}`, 'color:gray');
    this.logger.log(`                {-1, –µ—Å–ª–∏ p ‚â° ¬±3 mod 4  –∏   q ‚â° 3 mod 4}`, 'color:gray');
    this.logger.log(` `);
    this.logger.log(`- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -`, 'color:gray');
    this.logger.log(` `);
    let symbol: number = 1;

    // if (a === 1) {
    //   this.logger.log(`C–∏–º–≤–æ–ª –õ–µ–∂–∞–Ω–¥—Ä–∞ –≤—ã—á–∏—Å–ª–µ–Ω: 1.\n`);
    //   return 1;
    // }

    // –Ω–∞—á–∏–Ω–∞–µ–º
    //
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–Ω—ã–º
    const numIsPrime = isPrime(a);
    if (a === -1) {
      this.logger.log(`–ß–∏—Å–ª–æ a (${a}) = -1.`);
      symbol = this.useProperty2(a, p, 1);
    } else if (a === 2) {
      // –ï—Å–ª–∏ a = 2 
      this.logger.log(`–ß–∏—Å–ª–æ a (${a}) = 2.`);
      symbol = this.useProperty3(a, p, 1);
    } else if (numIsPrime) {
      // –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ–µ —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π –∑–∞–∫–æ–Ω –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏
      this.logger.log(`–ß–∏—Å–ª–æ a (${a}) –ø—Ä–æ—Å—Ç–æ–µ.`);
      symbol = this.useQuadraticReciprocityLaw(a, p, 1);
    } else {
      // –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–æ 4
      this.logger.log(`–ß–∏—Å–ª–æ a (${a}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º.`);
      symbol = this.useProperty4(a, p, 1);
    }

    this.logger.log(`C–∏–º–≤–æ–ª –õ–µ–∂–∞–Ω–¥—Ä–∞ –≤—ã—á–∏—Å–ª–µ–Ω: ${symbol}.\n`);
    this.symbol = symbol;
    return symbol;
  }



  /**
   * Property 1 of Legendre's Symbol
   * @param a number
   * @param p number
   * @returns number
   */
  useProperty1(a: number, p: number, t: number = 0): number {
    // this.logger.log(`1. (a¬≤/p) = 1`);
    let symbol: number = 1;
    this.logger.log(`${tt(t)}–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–æ 1 –¥–ª—è (${a}¬≤/${p}).`);

    this.logger.log(`${tt(t)}–°–∏–º–≤–æ–ª –õ–µ–∂–∞–Ω–¥—Ä–∞ –¥–ª—è (${a}¬≤/${p}): ${symbol}.`);
    this.logger.log(`${tt(t)} `);
    return symbol;
  }



  /**
   * Property 2 of Legendre's Symbol
   * @param a number
   * @param p number
   * @returns number
   */
  useProperty2(a: number, p: number, t: number = 0): number {
    // this.logger.log(`2. (-1/p) = p mod 4`);
    let symbol: number = 1;
    this.logger.log(`${tt(t)}–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–æ 2 –¥–ª—è (${a}/${p}).`);

    const m = modulo2(p, 4);
    if (m[1] === 1) {
      symbol = 1;
    } else {
      symbol = m[0];
    }
    this.logger.log(`${tt(t)}(${a}/${p}) = {${p} mod 4} = ${symbol}`);

    this.logger.log(`${tt(t)}–°–∏–º–≤–æ–ª –õ–µ–∂–∞–Ω–¥—Ä–∞ –¥–ª—è (${a}/${p}): ${symbol}.`);
    this.logger.log(`${tt(t)} `);
    return symbol;
  }



  /**
   * Property 3 of Legendre's Symbol
   * @param a number
   * @param p number
   * @returns number
   */
  useProperty3(a: number, p: number, t: number = 0): number {
    // this.logger.log(`3. (2/p) = { 1, –µ—Å–ª–∏ p ‚â° ¬±1 mod 8}`);
    // this.logger.log(`   (2/p)   {-1, –µ—Å–ª–∏ p ‚â° ¬±3 mod 8}`);

    let symbol: number = 1;

    this.logger.log(`${tt(t)}–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–æ 3 –¥–ª—è (${a}/${p}).`);

    const moduli = modulo2(p, 8);



    if (moduli.includes(3)) {
      this.logger.log(`${tt(t)}(${a}/${p}) = {${p} mod 8 = 3} = -1`);
      symbol = -1;
    }

    else if (moduli.includes(1)) {
      this.logger.log(`${tt(t)}(${a}/${p}) = {${p} mod 8 = 1} = 1`);
      symbol = 1;
    }

    else if (moduli.includes(-1)) {
      this.logger.log(`${tt(t)}(${a}/${p}) = {${p} mod 8 = -1} = 1`);
      symbol = 1;
    }

    else if (moduli.includes(-3)) {
      this.logger.log(`${tt(t)}(${a}/${p}) = {${p} mod 8 = -3} = -1`);
      symbol = -1;
    }



    this.logger.log(`${tt(t)}–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å–∏–º–≤–æ–ª –õ–µ–∂–∞–Ω–¥—Ä–∞ –¥–ª—è (${a}/${p}): ${symbol}.`);
    this.logger.log(`${tt(t)} `);
    return symbol;
  }



  /**
   * Property 4 of Legendre's Symbol
   * –†–∞–∑–ª–æ–∂–∏—Ç—å –∞ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ - –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –õ–µ–∂–∞–Ω–¥—Ä–∞
   * @param a number
   * @param p number
   * @returns number
   */
  useProperty4(a: number, p: number, t: number = 0): number {
    // this.logger.log(`4. (a/p) = ( (a‚ÇÅ * a‚ÇÇ * a‚ÇÉ ... * a‚Çñ)/p ) = (a‚ÇÅ/p)(a‚ÇÇ/p)(a‚ÇÉ/p) ... (a‚Çñ/p)`);
    let symbols: number[] = [];

    this.logger.log(`${tt(t)}–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–æ 4 –¥–ª—è (${a}/${p}).`);
    this.logger.log(`${tt(t)} `);

    const factors = primeFactors(a);
    this.logger.log(`${tt(t)}–†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º ${a} –Ω–∞ –¥–µ–ª–∏—Ç–µ–ª–∏: ${factors.join()}`);

    let list: string[] = []
    for (let i = 0; i < factors.length; i++) {
      list.push(`(${factors[i]}/${p})`);
    }
    this.logger.log(`${tt(t)}(${a}/${p}) = ((${factors.join('*')})/${p}) = ${list.join('*')}`);
    this.logger.log(`${tt(t)} `);

    for (let i = 0; i < factors.length; i++) {
      const f = factors[i];
      let s: number = 0;
      if (f === 2) {
        s = this.useProperty3(f, p, t + 1);
      } else if (isPrime(f)) {
        s = this.useQuadraticReciprocityLaw(f, p, t + 1);
      } else if (!isPrime(f)) {
        s = this.useProperty4(a, p, t + 1);
      }
      if (s) {
        symbols.push(s);
        continue;
      }
      this.logger.error(`f=${f} —á—Ç–æ –¥–µ–ª–∞—Ç—å-—Ç–æ? üò±`);
    }


    const symbol = symbols.reduce((a, c) => a * c, 1);

    this.logger.log(`${tt(t)}–£–º–Ω–æ–∂–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è ${list.join('')} = ${symbols.join('*')} = ${symbol}`);

    return symbol;
  }



  /**
   * –ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π –∑–∞–∫–æ–Ω –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å–∏–º–≤–æ–ª –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞–∫–∞
   * @param a 
   * @param p 
   * @returns 
   */
  useQuadraticReciprocityLaw(p: number, q: number, t: number = 0): number {
    // this.logger.log(`–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π –∑–∞–∫–æ–Ω –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏:`);
    // this.logger.log(`   (p/q)(q/p) = { 1, –µ—Å–ª–∏ p ‚â° ¬±1 mod 4 –ª–∏–±–æ q ‚â° 1 mod 4}`);
    // this.logger.log(`                {-1, –µ—Å–ª–∏ p ‚â° ¬±3 mod 4  –∏   q ‚â° 3 mod 4}`);

    this.logger.log(`${tt(t)}–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π –∑–∞–∫–æ–Ω –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏ –¥–ª—è (${p}/${q}). p=${p}, q=${q}`);

    const pad = (p > q ? p : q).toString().length;
    let symbol: number = 1;

    const moduliP = modulo2(p, 4);
    const moduliQ = modulo2(q, 4);
    // this.logger.log(`${tt(t)}‚é∞ ${p.pad(pad)} mod 4 = ${moduliP[0]}‚é±`);
    // this.logger.log(`${tt(t)}‚é± ${q.pad(pad)} mod 4 = ${moduliQ[0]}‚é∞`);
    this.logger.log(`${tt(t)}‚é∞ ${p.toFixed().padStart(pad)} mod 4 = ${moduliP[0]}‚é±`);
    this.logger.log(`${tt(t)}‚é± ${q.toFixed().padStart(pad)} mod 4 = ${moduliQ[0]}‚é∞`);

    // to reverse sign multiplicator
    let reverseSign: number = 1;

    const pMinusThree = moduliP.includes(-3);
    const pThree = moduliP.includes(3);
    const qThree = moduliQ.includes(3);

    const pMinusOne = moduliP.includes(-1);
    const pOne = moduliP.includes(1);
    const qOne = moduliQ.includes(1);

    if (pThree && qThree) { // if ((pThree || pMinusThree) && qThree) {
      this.logger.log(`${tt(t)}–ü—Ä–∏ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–º–µ–Ω–∏—Ç—å –∑–Ω–∞–∫ —Å–∏–º–≤–æ–ª–∞: q = 3 mod 4, p = ${pMinusThree ? '-3' : '3'} mod 4.`);
      reverseSign = -1;
    } else if (pOne || qOne) { // } else if (pOne || pMinusOne || qOne) {
      // –ï—Å–ª–∏ p –∏–ª–∏ q —Ä–∞–≤–Ω—ã 1
      // —Ç–æ –ø–æ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–º—É –∑–∞–∫–æ–Ω—É –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏ 
      // –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å–∏–º–≤–æ–ª –±–µ–∑ —Å–º–µ–Ω—ã –∑–Ω–∞–∫–∞
      this.logger.log(`${tt(t)}–ú–æ–∂–µ–º –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å–∏–º–≤–æ–ª –±–µ–∑ —Å–º–µ–Ω—ã –∑–Ω–∞–∫–∞: ${pOne ? 'p' : 'q'} mod 4 = ${pMinusOne ? '-1' : '1'}.`);
      reverseSign = 1;
    }

    const reversedQ = p;
    const reversedP = modulo(q, p);
    this.logger.log(`${tt(t)}–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–π —Å–∏–º–≤–æ–ª: (${q}/${p}) = {${q} mod ${p} = ${reversedP}} = (${reversedP}/${reversedQ})`);

    if (reversedP === -1) {
      this.logger.log(`${tt(t)}p=${reversedP}.`);
      symbol = this.useProperty2(reversedP, reversedQ, t + 1);
    } if (reversedP === 1) {
      this.logger.log(`${tt(t)}p=${reversedP}. –ú–æ–∂–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ (1¬≤/${reversedQ}).`);
      symbol = this.useProperty1(reversedP, reversedQ, t + 1);
    } else if (reversedP === 2) {
      this.logger.log(`${tt(t)}p=${reversedP}. –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ 3.`);
      symbol = this.useProperty3(reversedP, reversedQ, t + 1);
    } else if (!isPrime(reversedP)) {
      this.logger.log(`${tt(t)}p –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º —á–∏—Å–ª–æ–º. p=${reversedP}. –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ 4.`);
      symbol = this.useProperty4(reversedP, reversedQ, t + 1);
    } else {
      this.logger.log(`${tt(t)}–°–∏–º–≤–æ–ª –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –µ—â–µ —Ä–∞–∑. p=${reversedP}.`);
      symbol = this.useQuadraticReciprocityLaw(reversedP, reversedQ, t + 1);
    }

    symbol = symbol * reverseSign;
    this.logger.log(`${tt(t)}–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å–∏–º–≤–æ–ª –õ–µ–∂–∞–Ω–¥—Ä–∞ –¥–ª—è (${p}/${q}): ${symbol}${reverseSign === -1 ? ' (–∑–Ω–∞–∫ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç)' : ''}.`);
    this.logger.log(`${tt(t)} `);

    return symbol;
  }



  /**
   * Print result
   */
  printResults(): void {
    this.logger.log(`The Legendre symbol: ${this.symbol}`, 'color:red');
  }



  /**
   * Run
   * @returns 
   */
  run() {
    this.calc(this.a, this.p);
    this.printResults();
    return this.symbol;
  }

}
